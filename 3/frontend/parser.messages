#  Cours "Semantics and applications to verification"
#
#  Marc Chevalier 2018
#  Ecole normale supÃ©rieure, Paris, France / CNRS / INRIA
#

file: TOK_ASSERT TOK_LPAREN TOK_WHILE 
##
## Ends in an error in state: 84.
##
## common_stat -> TOK_ASSERT TOK_LPAREN . expr TOK_RPAREN TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_ASSERT TOK_LPAREN 
##

Expected expression after "assert(".

file: TOK_ASSERT TOK_LPAREN TOK_int TOK_RPAREN TOK_int 
##
## Ends in an error in state: 86.
##
## common_stat -> TOK_ASSERT TOK_LPAREN expr TOK_RPAREN . TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_ASSERT TOK_LPAREN expr TOK_RPAREN 
##

Expected semicolon after assert statement.

file: TOK_ASSERT TOK_LPAREN TOK_int TOK_SEMICOLON 
##
## Ends in an error in state: 85.
##
## common_stat -> TOK_ASSERT TOK_LPAREN expr . TOK_RPAREN TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_ASSERT TOK_LPAREN expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production expr -> binary_expr 
##

Expected ")" before ";".

file: TOK_ASSERT TOK_int 
##
## Ends in an error in state: 83.
##
## common_stat -> TOK_ASSERT . TOK_LPAREN expr TOK_RPAREN TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_ASSERT 
##

Expected "(" after assert keyword.

file: TOK_HALT TOK_int 
##
## Ends in an error in state: 81.
##
## common_stat -> TOK_HALT . TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_HALT 
##

Expected ";" after halt statement.

file: TOK_IF TOK_LPAREN TOK_WHILE 
##
## Ends in an error in state: 70.
##
## stat -> TOK_IF TOK_LPAREN . expr TOK_RPAREN stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
## stat -> TOK_IF TOK_LPAREN . expr TOK_RPAREN stat_with_else TOK_ELSE stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_IF TOK_LPAREN 
##

Expected expression in if condition.

file: TOK_IF TOK_LPAREN TOK_int TOK_RPAREN TOK_LCURLY TOK_RCURLY TOK_ELSE TOK_int 
##
## Ends in an error in state: 102.
##
## stat -> TOK_IF TOK_LPAREN expr TOK_RPAREN stat_with_else TOK_ELSE . stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_IF TOK_LPAREN expr TOK_RPAREN stat_with_else TOK_ELSE 
##

Expected statement after "else".

file: TOK_IF TOK_LPAREN TOK_int TOK_RPAREN TOK_LCURLY TOK_RCURLY TOK_int 
##
## Ends in an error in state: 96.
##
## stat -> common_stat . [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
## stat_with_else -> common_stat . [ TOK_ELSE ]
##
## The known suffix of the stack is as follows:
## common_stat 
##

Expected statement.

file: TOK_IF TOK_LPAREN TOK_int TOK_RPAREN TOK_int 
##
## Ends in an error in state: 72.
##
## stat -> TOK_IF TOK_LPAREN expr TOK_RPAREN . stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
## stat -> TOK_IF TOK_LPAREN expr TOK_RPAREN . stat_with_else TOK_ELSE stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_IF TOK_LPAREN expr TOK_RPAREN 
##

Expected statement.

file: TOK_IF TOK_LPAREN TOK_int TOK_SEMICOLON 
##
## Ends in an error in state: 71.
##
## stat -> TOK_IF TOK_LPAREN expr . TOK_RPAREN stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
## stat -> TOK_IF TOK_LPAREN expr . TOK_RPAREN stat_with_else TOK_ELSE stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_IF TOK_LPAREN expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production expr -> binary_expr 
##

Expected ")".

file: TOK_IF TOK_int 
##
## Ends in an error in state: 69.
##
## stat -> TOK_IF . TOK_LPAREN expr TOK_RPAREN stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
## stat -> TOK_IF . TOK_LPAREN expr TOK_RPAREN stat_with_else TOK_ELSE stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_IF 
##

Expected ")" after "if".

file: TOK_LCURLY TOK_LCURLY TOK_RCURLY TOK_int 
##
## Ends in an error in state: 104.
##
## list(ext(stat)) -> stat . list(ext(stat)) [ TOK_RCURLY ]
##
## The known suffix of the stack is as follows:
## stat 
##

Expected statement.

file: TOK_LCURLY TOK_RCURLY TOK_int 
##
## Ends in an error in state: 108.
##
## list(toplevel) -> toplevel . list(toplevel) [ TOK_EOF ]
##
## The known suffix of the stack is as follows:
## toplevel 
##

Expected statement.

file: TOK_LCURLY TOK_int 
##
## Ends in an error in state: 68.
##
## block -> TOK_LCURLY . list(ext(stat)) TOK_RCURLY [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_LCURLY 
##

Expected statement.

file: TOK_PRINT TOK_LPAREN TOK_RPAREN TOK_int 
##
## Ends in an error in state: 66.
##
## common_stat -> TOK_PRINT TOK_LPAREN loption(separated_nonempty_list(TOK_COMMA,ext(lvalue))) TOK_RPAREN . TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_PRINT TOK_LPAREN loption(separated_nonempty_list(TOK_COMMA,ext(lvalue))) TOK_RPAREN 
##

Expected ";" after print statement.

file: TOK_PRINT TOK_LPAREN TOK_id TOK_COMMA TOK_int 
##
## Ends in an error in state: 63.
##
## separated_nonempty_list(TOK_COMMA,ext(lvalue)) -> lvalue TOK_COMMA . separated_nonempty_list(TOK_COMMA,ext(lvalue)) [ TOK_RPAREN ]
##
## The known suffix of the stack is as follows:
## lvalue TOK_COMMA 
##

Expected lvalue in print statement.

file: TOK_PRINT TOK_LPAREN TOK_id TOK_int 
##
## Ends in an error in state: 62.
##
## separated_nonempty_list(TOK_COMMA,ext(lvalue)) -> lvalue . [ TOK_RPAREN ]
## separated_nonempty_list(TOK_COMMA,ext(lvalue)) -> lvalue . TOK_COMMA separated_nonempty_list(TOK_COMMA,ext(lvalue)) [ TOK_RPAREN ]
##
## The known suffix of the stack is as follows:
## lvalue 
##

Expected "," between each lvalue in print statement.

file: TOK_PRINT TOK_LPAREN TOK_int 
##
## Ends in an error in state: 60.
##
## common_stat -> TOK_PRINT TOK_LPAREN . loption(separated_nonempty_list(TOK_COMMA,ext(lvalue))) TOK_RPAREN TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_PRINT TOK_LPAREN 
##

Expected lvalue in print statement.

file: TOK_PRINT TOK_int 
##
## Ends in an error in state: 59.
##
## common_stat -> TOK_PRINT . TOK_LPAREN loption(separated_nonempty_list(TOK_COMMA,ext(lvalue))) TOK_RPAREN TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_PRINT 
##

Expected "(" after print statement.

file: TOK_WHILE TOK_LPAREN TOK_WHILE 
##
## Ends in an error in state: 3.
##
## stat -> TOK_WHILE TOK_LPAREN . expr TOK_RPAREN stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_WHILE TOK_LPAREN 
##

Expected expression in while condition.

file: TOK_WHILE TOK_LPAREN TOK_int TOK_RPAREN TOK_int 
##
## Ends in an error in state: 58.
##
## stat -> TOK_WHILE TOK_LPAREN expr TOK_RPAREN . stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_WHILE TOK_LPAREN expr TOK_RPAREN 
##

Expected statement.

file: TOK_WHILE TOK_LPAREN TOK_int TOK_SEMICOLON 
##
## Ends in an error in state: 57.
##
## stat -> TOK_WHILE TOK_LPAREN expr . TOK_RPAREN stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_WHILE TOK_LPAREN expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production expr -> binary_expr 
##

Expected ")".

file: TOK_WHILE TOK_int 
##
## Ends in an error in state: 2.
##
## stat -> TOK_WHILE . TOK_LPAREN expr TOK_RPAREN stat [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## TOK_WHILE 
##

Expected "(" after "while" keyword.

file: TOK_id TOK_EQUAL TOK_EXCLAIM TOK_WHILE 
##
## Ends in an error in state: 22.
##
## unary_expr -> TOK_EXCLAIM . unary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## TOK_EXCLAIM 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_LPAREN TOK_WHILE 
##
## Ends in an error in state: 20.
##
## primary_expr -> TOK_LPAREN . expr TOK_RPAREN [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## TOK_LPAREN 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_LPAREN TOK_int TOK_SEMICOLON 
##
## Ends in an error in state: 26.
##
## primary_expr -> TOK_LPAREN expr . TOK_RPAREN [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## TOK_LPAREN expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production expr -> binary_expr 
##

Expected ")".

file: TOK_id TOK_EQUAL TOK_MINUS TOK_WHILE 
##
## Ends in an error in state: 19.
##
## unary_expr -> TOK_MINUS . unary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## TOK_MINUS 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_PLUS TOK_WHILE 
##
## Ends in an error in state: 18.
##
## unary_expr -> TOK_PLUS . unary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## TOK_PLUS 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_RAND TOK_LPAREN TOK_MINUS TOK_id 
##
## Ends in an error in state: 12.
##
## sign_int_literal -> TOK_MINUS . TOK_int [ TOK_RPAREN TOK_COMMA ]
##
## The known suffix of the stack is as follows:
## TOK_MINUS 
##

Expected literal value.

file: TOK_id TOK_EQUAL TOK_RAND TOK_LPAREN TOK_PLUS TOK_id 
##
## Ends in an error in state: 10.
##
## sign_int_literal -> TOK_PLUS . TOK_int [ TOK_RPAREN TOK_COMMA ]
##
## The known suffix of the stack is as follows:
## TOK_PLUS 
##

Expected literal value.

file: TOK_id TOK_EQUAL TOK_RAND TOK_LPAREN TOK_id 
##
## Ends in an error in state: 8.
##
## primary_expr -> TOK_RAND TOK_LPAREN . sign_int_literal TOK_COMMA sign_int_literal TOK_RPAREN [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## TOK_RAND TOK_LPAREN 
##

Expected literal value.

file: TOK_id TOK_EQUAL TOK_RAND TOK_LPAREN TOK_int TOK_COMMA TOK_id 
##
## Ends in an error in state: 15.
##
## primary_expr -> TOK_RAND TOK_LPAREN sign_int_literal TOK_COMMA . sign_int_literal TOK_RPAREN [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## TOK_RAND TOK_LPAREN sign_int_literal TOK_COMMA 
##

Expected literal value.

file: TOK_id TOK_EQUAL TOK_RAND TOK_LPAREN TOK_int TOK_COMMA TOK_int TOK_int 
##
## Ends in an error in state: 16.
##
## primary_expr -> TOK_RAND TOK_LPAREN sign_int_literal TOK_COMMA sign_int_literal . TOK_RPAREN [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## TOK_RAND TOK_LPAREN sign_int_literal TOK_COMMA sign_int_literal 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_RAND TOK_LPAREN TOK_int TOK_int 
##
## Ends in an error in state: 14.
##
## primary_expr -> TOK_RAND TOK_LPAREN sign_int_literal . TOK_COMMA sign_int_literal TOK_RPAREN [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## TOK_RAND TOK_LPAREN sign_int_literal 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_RAND TOK_int 
##
## Ends in an error in state: 7.
##
## primary_expr -> TOK_RAND . TOK_LPAREN sign_int_literal TOK_COMMA sign_int_literal TOK_RPAREN [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## TOK_RAND 
##

Expected "(" after rand keyword.

file: TOK_id TOK_EQUAL TOK_WHILE 
##
## Ends in an error in state: 93.
##
## common_stat -> lvalue TOK_EQUAL . expr TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## lvalue TOK_EQUAL 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_AND_AND TOK_WHILE 
##
## Ends in an error in state: 53.
##
## binary_expr -> binary_expr TOK_AND_AND . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_AND_AND 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_AND_AND TOK_int TOK_int 
##
## Ends in an error in state: 54.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr TOK_AND_AND binary_expr . [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_AND_AND binary_expr 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_int TOK_BAR_BAR TOK_WHILE 
##
## Ends in an error in state: 51.
##
## binary_expr -> binary_expr TOK_BAR_BAR . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_BAR_BAR 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_BAR_BAR TOK_int TOK_int 
##
## Ends in an error in state: 52.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr TOK_BAR_BAR binary_expr . [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_BAR_BAR binary_expr 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_int TOK_DIVIDE TOK_WHILE 
##
## Ends in an error in state: 35.
##
## binary_expr -> binary_expr TOK_DIVIDE . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_DIVIDE 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_EQUAL_EQUAL TOK_WHILE 
##
## Ends in an error in state: 49.
##
## binary_expr -> binary_expr TOK_EQUAL_EQUAL . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_EQUAL_EQUAL 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_EQUAL_EQUAL TOK_int TOK_int 
##
## Ends in an error in state: 50.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr TOK_EQUAL_EQUAL binary_expr . [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_EQUAL_EQUAL binary_expr 
##

Unexpected exprssion.

file: TOK_id TOK_EQUAL TOK_int TOK_GREATER TOK_WHILE 
##
## Ends in an error in state: 47.
##
## binary_expr -> binary_expr TOK_GREATER . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_GREATER 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_GREATER TOK_int TOK_int 
##
## Ends in an error in state: 48.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr TOK_GREATER binary_expr . [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_GREATER binary_expr 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_int TOK_GREATER_EQUAL TOK_WHILE 
##
## Ends in an error in state: 45.
##
## binary_expr -> binary_expr TOK_GREATER_EQUAL . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_GREATER_EQUAL 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_GREATER_EQUAL TOK_int TOK_int 
##
## Ends in an error in state: 46.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr TOK_GREATER_EQUAL binary_expr . [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_GREATER_EQUAL binary_expr 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_int TOK_LESS TOK_WHILE 
##
## Ends in an error in state: 43.
##
## binary_expr -> binary_expr TOK_LESS . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_LESS 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_LESS TOK_int TOK_int 
##
## Ends in an error in state: 44.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr TOK_LESS binary_expr . [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_LESS binary_expr 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_int TOK_LESS_EQUAL TOK_WHILE 
##
## Ends in an error in state: 41.
##
## binary_expr -> binary_expr TOK_LESS_EQUAL . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_LESS_EQUAL 
##

Expected expression

file: TOK_id TOK_EQUAL TOK_int TOK_LESS_EQUAL TOK_int TOK_int 
##
## Ends in an error in state: 42.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr TOK_LESS_EQUAL binary_expr . [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_LESS_EQUAL binary_expr 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_int TOK_MINUS TOK_WHILE 
##
## Ends in an error in state: 39.
##
## binary_expr -> binary_expr TOK_MINUS . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_MINUS 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_MINUS TOK_int TOK_int 
##
## Ends in an error in state: 40.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr TOK_MINUS binary_expr . [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_MINUS binary_expr 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_int TOK_NOT_EQUAL TOK_WHILE 
##
## Ends in an error in state: 37.
##
## binary_expr -> binary_expr TOK_NOT_EQUAL . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_NOT_EQUAL 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_NOT_EQUAL TOK_int TOK_int 
##
## Ends in an error in state: 38.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr TOK_NOT_EQUAL binary_expr . [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_NOT_EQUAL binary_expr 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_int TOK_PERCENT TOK_WHILE 
##
## Ends in an error in state: 33.
##
## binary_expr -> binary_expr TOK_PERCENT . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_PERCENT 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_PLUS TOK_WHILE 
##
## Ends in an error in state: 31.
##
## binary_expr -> binary_expr TOK_PLUS . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_PLUS 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_PLUS TOK_int TOK_int 
##
## Ends in an error in state: 32.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr TOK_PLUS binary_expr . [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_PLUS binary_expr 
##

Expected ";".

file: TOK_id TOK_EQUAL TOK_int TOK_RPAREN 
##
## Ends in an error in state: 94.
##
## common_stat -> lvalue TOK_EQUAL expr . TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## lvalue TOK_EQUAL expr 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 28, spurious reduction of production expr -> binary_expr 
##

Unexpected ")".

file: TOK_id TOK_EQUAL TOK_int TOK_STAR TOK_WHILE 
##
## Ends in an error in state: 29.
##
## binary_expr -> binary_expr TOK_STAR . binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
##
## The known suffix of the stack is as follows:
## binary_expr TOK_STAR 
##

Expected expression.

file: TOK_id TOK_EQUAL TOK_int TOK_int 
##
## Ends in an error in state: 28.
##
## binary_expr -> binary_expr . TOK_STAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_DIVIDE binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PERCENT binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_PLUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_MINUS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_LESS_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_GREATER_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_EQUAL_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_NOT_EQUAL binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_AND_AND binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## binary_expr -> binary_expr . TOK_BAR_BAR binary_expr [ TOK_STAR TOK_SEMICOLON TOK_RPAREN TOK_PLUS TOK_PERCENT TOK_NOT_EQUAL TOK_MINUS TOK_LESS_EQUAL TOK_LESS TOK_GREATER_EQUAL TOK_GREATER TOK_EQUAL_EQUAL TOK_DIVIDE TOK_BAR_BAR TOK_AND_AND ]
## expr -> binary_expr . [ TOK_SEMICOLON TOK_RPAREN ]
##
## The known suffix of the stack is as follows:
## binary_expr 
##

Expected ";".

file: TOK_id TOK_int 
##
## Ends in an error in state: 92.
##
## common_stat -> lvalue . TOK_EQUAL expr TOK_SEMICOLON [ TOK_id TOK_WHILE TOK_RCURLY TOK_PRINT TOK_LCURLY TOK_IF TOK_HALT TOK_EOF TOK_ELSE TOK_ASSERT ]
##
## The known suffix of the stack is as follows:
## lvalue 
##

Expected ";".

file: TOK_int 
##
## Ends in an error in state: 0.
##
## file' -> . file [ # ]
##
## The known suffix of the stack is as follows:
## 
##

Expected statement.

